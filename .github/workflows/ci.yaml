name: CI-LLMOPS-RAG

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (for OCR)
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr poppler-utils

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run linting (optional)
        continue-on-error: true
        run: |
          pip install flake8
          flake8 multi_doc_chat --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v

      - name: Run all tests with coverage
        run: |
          pytest --cov=multi_doc_chat --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov (optional)
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Check code formatting with black
        continue-on-error: true
        run: |
          black --check multi_doc_chat tests

      - name: Lint with flake8
        continue-on-error: true
        run: |
          flake8 multi_doc_chat tests --count --max-line-length=120 --statistics